# -*- coding: utf-8 -*-
"""Intrusion_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i53ssMZ_2iaK4NzJEc7Baf7r-u23vYLU
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from xgboost import XGBClassifier
from sklearn.metrics import classification_report
import joblib

DATA_FILES = [
    "/content/Wednesday-workingHours.pcap_ISCX.csv",
    "/content/Friday-WorkingHours-Afternoon-DDos.pcap_ISCX.csv"
]

MODEL_PATH = "cicids_xgb_multiclass.pkl"

dfs = [pd.read_csv(f, low_memory=False, on_bad_lines='skip') for f in DATA_FILES]
for df in dfs:
    df.columns = df.columns.str.strip()
data = pd.concat(dfs, ignore_index=True)
print("Merged dataset shape:", data.shape)

data.replace([float('inf'), -float('inf')], 0, inplace=True)
data.dropna(inplace=True)

print(data.columns.tolist())

X = data.drop(columns=["Label"])
y = data["Label"]

category_encoders = {}
for col in X.select_dtypes(include=["object"]).columns:
    le_col = LabelEncoder()
    X[col] = le_col.fit_transform(X[col].astype(str))
    category_encoders[col] = le_col
joblib.dump(category_encoders, "category_encoders.pkl")

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

joblib.dump(X.columns.tolist(), "training_columns.pkl")

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y_encoded, test_size=0.3, random_state=42, stratify=y_encoded
)

model = XGBClassifier(
    n_estimators=200,
    max_depth=10,
    tree_method="hist",
    device="cuda",        # Use GPU
    objective="multi:softmax",  # Multi-class classification
    num_class=len(label_encoder.classes_),  # number of attack types
    eval_metric="mlogloss"
)


model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

joblib.dump(model, MODEL_PATH)
joblib.dump(label_encoder, "label_encoder.pkl")
print(f"Multi-class model saved to {MODEL_PATH}")

import joblib

model = joblib.load("cicids_xgb_multiclass.pkl")
label_encoder = joblib.load("label_encoder.pkl")

import pandas as pd
import joblib
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

train_files = [
    "/content/Wednesday-workingHours.pcap_ISCX.csv",
    "/content/Friday-WorkingHours-Afternoon-DDos.pcap_ISCX.csv"
]

train_dfs = [pd.read_csv(f, low_memory=False) for f in train_files]
train_data = pd.concat(train_dfs, ignore_index=True)
train_data.columns = train_data.columns.str.strip()

X_train = train_data.drop(columns=["Label"])

for col in X_train.select_dtypes(include=["object"]).columns:
    X_train[col] = X_train[col].astype("category").cat.codes

#Clean training features
X_train = X_train.replace([float('inf'), -float('inf')], 0)
X_train = X_train.fillna(0)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(X_train)

joblib.dump(scaler, "scaler.pkl")

test_file = "/content/Tuesday-WorkingHours.pcap_ISCX.csv"
test_data = pd.read_csv(test_file, low_memory=False)
test_data.columns = test_data.columns.str.strip()
#drop label
X_test = test_data.drop(columns=["Label"])
y_true = test_data["Label"]

X_test = X_test.replace([float("inf"), -float("inf")], 0).fillna(0)
for col in X_test.select_dtypes(include=["object"]).columns:
    X_test[col] = X_test[col].astype("category").cat.codes

mask = X_test.index
y_true_filtered = y_true.loc[mask]

X_test_scaled = scaler.transform(X_test)

y_pred_enc = model.predict(X_test_scaled)
y_pred = label_encoder.inverse_transform(y_pred_enc)

print("Classification Report:\n")
print(classification_report(y_true_filtered, y_pred))

cm = confusion_matrix(y_true, y_pred, labels=label_encoder.classes_)
plt.figure(figsize=(12,8))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=label_encoder.classes_,
            yticklabels=label_encoder.classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix - Friday Afternoon Test")
plt.show()

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

accuracy = accuracy_score(y_true, y_pred) #accuracy
print("Overall Accuracy: {:.2f}%".format(accuracy * 100))

#evaluation on classes the model was trained on
train_classes = label_encoder.classes_

# Filter
mask = y_true.isin(train_classes)
X_test_filtered = X_test_scaled[mask]
y_true_filtered = y_true[mask]

y_pred_enc_filtered = model.predict(X_test_filtered)
y_pred_filtered = label_encoder.inverse_transform(y_pred_enc_filtered)

from sklearn.metrics import classification_report
print(classification_report(y_true_filtered, y_pred_filtered))

accuracy = accuracy_score(y_true_filtered, y_pred_filtered) #accuracy
print("Overall Accuracy: {:.2f}%".format(accuracy * 100))